#!/bin/bash
set -o nounset
set -o errexit

# -- global settings --------------------------------------------------

# when MINICA_TEST_MODE is set, we use shorter key lengths. This is for
# tests only.
if [[ "$MINICA_TEST_MODE" = y ]]; then
  readonly MINICA_KEY_SIZE=512
else
  readonly MINICA_KEY_SIZE=4096
fi

# -- local settings ---------------------------------------------------

HERE=$(realpath $(dirname $0))

MINICA_ROOT=

CA_ROOT=
export CA_ROOT

. ${HERE}/miniCA.conf

# -- shortcuts for openssl commands -----------------------------------

set_ca_instance() {
  [[ "$MINICA_ROOT" ]] || die "Set miniCA root directory using the -r option"
  local ca_instance=${1:-}

  CA_ROOT=$MINICA_ROOT/$ca_instance
}

verify_ca_root() {
  [[ -d "$CA_ROOT" ]] || die "Missing ca installation in $CA_ROOT"
}

openssl() {
  echo '> openssl' "$@" >&2
  $(which openssl) "$@"
}

req="openssl req -config ${HERE}/miniCA.ssl.conf"
genrsa="openssl genrsa"
verify="openssl verify"
ca="openssl ca -config ${HERE}/miniCA.ssl.conf"

# -- helpers ----------------------------------------------------------

die() {
  echo "$@" >&2
  exit 1
}

# return the absolute path for $1
abspath() {
  if [[ "$1" = /* ]]; then
    echo $1
  else
    echo $(pwd)/$1
  fi
}

# -- create key and CSR -----------------------------------------------

#
# create a certificate for common name $1. This is typically done by
# the client; the resulting csr is sent to the CA to be signed there.
ssl_keygen() {
  local fqdn=${1:-}
  [[ "$fqdn" ]] || die "Missing fqdn parameter"

  [[ -e ${fqdn}.priv ]] && die "Target file ${fqdn}.priv exists already"
  [[ -e ${fqdn}.csr ]]  && die "Target file ${fqdn}.csr exists already"

  $req -new \
       -nodes \
       -keyout ${fqdn}.priv \
       -out ${fqdn}.csr \
       -subj /C=de/ST=ne/L=Berlin/O=pipe2me/CN=${fqdn} \
       -days 7300
}

#
# Sign a cerificate request in $1. Creates .pem file from .csr file.
# (i.e. ca_sign_csr abc.csr creates abc.pem)
#
# Arguments: ca_sign_csr csr
ca_sign_csr() {
  verify_ca_root

  local csr=$1
  [[ "$csr" ]] || die "Missing .csr parameter"
  [[ -e "$csr" ]] || die "Missing file $csr"

  local out=$(echo $csr | sed 's-\.csr$--').pem

  $ca -batch \
    -policy policy_anything \
    -out $out \
    -infiles "$csr"

  # keep certificate in $CA_ROOT/certs
  cp $out "$CA_ROOT/certs/$(basename $out)"
}

#
# initialise the CA. Needs the -r option.
#
# Arguments: ca_init
ca_init() {
  [[ -d $CA_ROOT ]] || mkdir -p $CA_ROOT
  pushd $CA_ROOT > /dev/null

  if ! [ -e index.txt ]; then
    # -- create CA directory structure --------------------------------

    mkdir -m 0700 private certs csr newcerts crl root

    touch index.txt
    echo '01' > serial

    # -- create CA root private key -----------------------------------
    $genrsa -out root/private_key.pem $MINICA_KEY_SIZE

    # -- create self signed root certificate --------------------------
    $req -new \
      -subj "/C=$CA_COUNTRY/ST=$CA_STATE/L=$CA_CITY/CN=$CA_COMMONNAME" \
      -out root/certificate.pem \
      -key root/private_key.pem -x509 \
      -days 7300

    # -- Create an initial empty certificate revocation list (CRL) ----

    $ca \
      -gencrl \
      -keyfile root/private_key.pem \
      -cert root/certificate.pem \
      -out crl/crl.pem
  fi

  popd > /dev/null
}

#
# Verify a certificate against the miniCA. The parameter is the certificate
# in .pem format
#
# Arguments: ca_verify
ca_verify() {
  verify_ca_root

  local pem=${1:-}
  [[ "$pem" ]] || die "Missing .pem parameter"
  [[ -e "$pem" ]] || die "Missing file $pem"

  # I am not sure about the openssl return values. 
  # Asking to verify a non-pem file results in exit code 0, at least
  # (huh?).
  #
  # That's why we parse openssl's output instead 
  result=$($verify -verbose -purpose sslserver -CAfile $CA_ROOT/root/certificate.pem $pem)
  if echo $result | grep -e ": OK\$" ; then
    exit 0
  else
    echo $result
    exit 1
  fi

  popd
}

# -- parse parameters -------------------------------------------------

usage()
{
cat << EOF
Usage: $0 <subcommand> options ...

The following subcommands are supported:

$0 generate CN                  ... generate a key and a CSR for a given CN
$0 init -r ROOT                 ... initialize a CA in ROOT
$0 sign -r ROOT name.csr        ... sign a CSR
$0 verify -r ROOT name.pem      ... verify a certificate against the CSR

General options include:

    -v ... Verbose: show openssl invocations

EOF
  exit 1
}

subcommand=${1:-}
[[ "$subcommand" ]] && shift

while getopts “hr:” OPTION
do
  case $OPTION in
    r) MINICA_ROOT=$(abspath $OPTARG);;
    v) VERBOSE=1 ;;
    h) usage ;;
    ?) usage ;;
  esac
done

shift $(($OPTIND - 1))

case $subcommand in 
  generate)
    ssl_keygen "$@"
    ;;
  init)
    set_ca_instance "root"
    ca_init
    ;;
  sign)
    set_ca_instance "root"
    ca_init
    ca_sign_csr "$@"
    ;;
  verify)
    set_ca_instance "root"
    ca_init
    ca_verify "$@"
    ;;
  *)
    printf "Unknown or missing subcommand %s.\n\n" subcommand
    usage
    ;;
esac
